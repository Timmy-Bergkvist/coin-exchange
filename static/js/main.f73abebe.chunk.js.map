{"version":3,"sources":["components/Header/logo.png","components/coin/coin.jsx","components/Coinlist/Coinlist.jsx","components/AccountBalance/AccountBalance.jsx","components/Header/Header.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Td","styled","td","coin","props","name","ticker","price","showBalance","balance","action","method","className","onClick","event","preventDefault","handleRefresh","tickerId","Coinlist","coinData","map","key","Section","section","AccountBalance","buttonText","content","amount","handelToggleBalance","Header","src","logo","alt","Component","Footer","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f73abebe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c90031ff.png\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './coin.css'\r\nimport styled from 'styled-components';\r\n\r\nconst Td = styled.td`\r\n    border: 1px solid #cccccc;\r\n    width: 50vh;\r\n`;\r\n\r\nexport default function coin(props) {\r\n\r\n   const handleClick = (event) => {\r\n       // prevent the default action of submitting the form\r\n       event.preventDefault();\r\n       props.handleRefresh(props.tickerId);\r\n   }\r\n   \r\n     \r\n    return (\r\n        <tr>\r\n            <Td>{props.name}</Td>\r\n            <Td>{props.ticker}</Td>\r\n            <Td>${props.price}</Td>\r\n            <Td>{ props.showBalance ? <>{props.balance}</> : \"-\" }</Td>\r\n            <Td>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <button className=\"refresh\" onClick={handleClick}>Refresh</button>\r\n                </form>\r\n                <button className=\"buy\" >Buy</button>\r\n                <button className=\"sell\" >Sell</button>\r\n            </Td>\r\n        </tr>\r\n    );\r\n\r\n}\r\n\r\ncoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}\r\n","import React from 'react';\r\nimport Coin from '../coin/coin';\r\nimport './Coinlist.css'\r\n\r\nexport default function Coinlist(props) {\r\n  return (\r\n      <table className=\"coin-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Ticker</th>\r\n          <th>Price</th>\r\n          <th>Balance</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          props.coinData.map( ({key, name, ticker, price, balance}) => \r\n            <Coin key={key} \r\n                  handleRefresh={props.handleRefresh}\r\n                  name={name}\r\n                  ticker={ticker}\r\n                  showBalance={props.showBalance}\r\n                  balance={balance}\r\n                  price={price}\r\n                  tickerId={key} />\r\n          )\r\n        }\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './accountbalance.css';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: left;\r\n    padding: 1.5rem 0 1.5rem 5rem;\r\n`;\r\n\r\nexport default function AccountBalance(props) {\r\n    \r\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    let content = null;\r\n    if ( props.showBalance ) {\r\n        content = <>$ <span> {props.amount} </span></>;\r\n    }\r\n\r\n    return (\r\n        <Section className=\"account-balance\">\r\n            Balance: { content }\r\n            <button onClick={props.handelToggleBalance}>{buttonText}</button>\r\n        </Section>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}","import React, { Component } from 'react';\r\nimport logo from './logo.png';\r\nimport './Header.css'\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n            <img src={logo} alt=\"react logo\" className=\"App-logo\" />\r\n            <h1 className=\"app-title\">\r\n              Coin Exchange \r\n              <span className=\"app-second-title\">Top 10 coins</span>\r\n            </h1>\r\n          </header>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Footer.css'\r\n\r\nexport default function Footer(props) {\r\n  return (\r\n    <footer className=\"footer\">\r\n        <div>\r\n            <div>\r\n                <p >Â© 2020 Copyright: Footer Test. Site by: Timmy Bergkvist</p>\r\n            </div>\r\n        </div>\r\n    </footer>\r\n  );\r\n}","import React, {useState, useEffect} from 'react';\nimport Coinlist from './components/Coinlist/Coinlist';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(43 63 102);\n  color: #cccccc;\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\n\nfunction App(props) {\n  // eslint-disable-next-line\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const  componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises)\n    const coinPriceData = coinData.map(function(response){\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };\n    })\n    // Retrive the prices\n    setCoinData(coinPriceData);\n    }\n\n  useEffect(function() {\n    if (coinData.length === 0 ) {\n      componentDidMount();\n    }\n  });\n\n\n  const handelToggleBalance = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function( values ) {\n      let newValues = { ...values };\n      if ( valueChangeId === values.key ) {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    \n    setCoinData(newCoinData);\n  }\n\n  return (\n    <Div className=\"App\">\n      <Header />\n      <AccountBalance \n        amount={balance}\n        showBalance={showBalance}\n        handelToggleBalance={handelToggleBalance} />\n      <Coinlist\n        coinData={coinData}\n        showBalance={showBalance}\n        handleRefresh={handleRefresh} />\n      <Footer />\n    </Div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}